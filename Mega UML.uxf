<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>486</y>
      <w>132</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Controller
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6</x>
      <y>504</y>
      <w>120</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Runner</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>6</x>
      <y>570</y>
      <w>120</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Controller</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>288</x>
      <y>486</y>
      <w>132</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>View
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>144</x>
      <y>486</y>
      <w>132</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Model
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>54</x>
      <y>354</y>
      <w>96</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>Created by N Beaver
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>210</x>
      <y>294</y>
      <w>234</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData:int
- nodePointer : IntNode *
--
+ getNodeData() : int
+ getNodePointer() : IntNode *
+ setNodeData(int value) : void
+ setNodePointer(IntNode * next) : void

+ IntNode() : constructor
+ IntNode(int value) : init
+ IntNode(int value, IntNode * nextNode) : constructor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>300</y>
      <w>168</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size: int
- front: IntNode*
--
+IntNodeArray(int size) : constructor
+setAtindex(int index, int value): void
+getFromIndex(int index): int
+getSize(): int</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>204</x>
      <y>276</y>
      <w>474</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>Typed Sample
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>438</x>
      <y>348</y>
      <w>72</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-

1..n</panel_attributes>
    <additional_attributes>100.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>708</x>
      <y>516</y>
      <w>192</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
DataMembers

- nodeData : Type
- nodePointer : Node&lt;Type&gt; * 
--
Constructors
+ Node() : constructor
+ Node(Type value) : constructor
+ Node(Type data, Node&lt;Type&gt; * pointer

Methods

+ getNodeData() : Type
+ getNodePointer() : Node&lt;Type&gt; *
+ setNodeData(Type data) : void
+ setNodePointer(Node&lt;Type&gt; * next) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>708</x>
      <y>270</y>
      <w>294</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
Data Members 

- front : Node&lt;Type&gt; *
- size : int

--
Constructors
+ Array() : constructor
+ Array(int size) : constructor

Advanced

+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor
Methods

+ getSize() : int
+ getFront() const : Node&lt;Type&gt; *

+ setAtIndex(int index, Type value) : void
+ getFromIndex(int index): Type</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>804</x>
      <y>480</y>
      <w>30</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
1..n</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>438</x>
      <y>588</y>
      <w>258</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt;*
+ getEnd() const : Node&lt;Type&gt;*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>594</x>
      <y>462</y>
      <w>126</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
0..n</panel_attributes>
    <additional_attributes>10.0;210.0;190.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>378</x>
      <y>114</y>
      <w>294</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
- previous : BiDirecitonalNode&lt;Type&gt; *
- next : BiDirectionalNode&lt;Type&gt; *

--
+ BiDirectionalNode() : constructor
+ BiDirectionalNode(Type data) : constructor
+ BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous,
						BiDirectionalNode&lt;Type&gt; * next) : constructor

+ getNodeData() : Type
+ setNodeData(Type data) : void
+ getPreviousNode() : BiDirectionalNode&lt;Type&gt; *
+ setNextNode(BiDirectionalNode&lt;Type&gt; * next) : void
+ setPreviousNode(BiDirectionalNode&lt;Type&gt; * previous) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>666</x>
      <y>186</y>
      <w>192</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>300.0;140.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
